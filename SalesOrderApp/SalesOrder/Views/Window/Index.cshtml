

@{
    ViewData["Title"] = "Window Entry";
    Layout = "~/Views/Shared/Template/_Layout.cshtml";
}


<br />
<div class="content">
    <div class="container-fluid">
        <div class="card card-default">
            <div class="card-header">
                 <h3 class="card-title">Window List</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                </div>
            </div>            
            <div class="card-body">  
                <div class="card-content">
                    <div id="product-summary" class="media-list position-relative">
                        <div class="table-responsive">
                            <table class="table table-padded table-xl mb-0 w-100" id="process-list-table">
                                <thead>
                                    <tr>
                                        <th>Wndow Name</th>
                                        <th>Order Name</th>
                                        <th>Edit</th>
                                    </tr>
                                </thead>
                                <tbody>

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>              
            </div>
        </div>    
    </div>
</div>

<partial name="_windowEntry" />

@section Scripts
{
    <script>
    var table;

    table = $('#process-list-table').DataTable({
        "filter": true, // this is for disable filter (search box)
        "paging": true,
        "pageLength": 10,
        "lengthChange": false,
        "pagingType": "full_numbers",
        "scrollX": false,
        "autoWidth": true,
        "initComplete": function (settings, json) {
            $("#process-list-table").wrap("<div style='overflow:auto; width:100%;position:relative;'></div>");

            var btns = $('.btn-primary');
                btns.addClass('btn-sm');
                btns.removeClass('btn-secondary');
        },
        buttons: [
            {
                id:"btnAddNew",
                text: 'Add New',
                className: 'btn-primary',
                action: function ( e, dt, node, config ) {
                    $("#process-entry-modal").modal('show');
                }
            }
        ],
    });

    loadCallTypeList();

    function loadCallTypeList() {

        $('#process-list-table').DataTable().destroy();

        table =  $('#process-list-table').DataTable({
            //"processing": true, // for show progress bar
            "language": {
                processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only">Loading...</span> '
            },
            "filter": true, // this is for disable filter (search box)
            "paging": true,
            "pageLength": 10,
            "lengthChange": false,
            "pagingType": "full_numbers",
            "scrollX": false,
            "autoWidth": true,
            "bInfo" : false,
            "ajax": {
                "url": "/Window/GetAllWindowList",
                "dataSrc": function(d) {
                    if (d.data.length === 0) {
                        var settings = $('#process-list-table').DataTable().settings()[0];
                        settings.oLanguage.sEmptyTable = d.message;
                    }
                    return d.data;
                },
                "type": "GET",
                "dataType": "json"
            },
            "columns": [
                { "data": "windowName", "name": "windowName" },
                { "data": "orderName", "name": "orderName" },                
                {
                    data: null,
                    render: function (data, type, row) {
                        var dom = '<span class="cursor-pointer row-edit" ><i class="fas fa-edit primary fa-2x"></i><span>';
                        return dom;
                    }
                },
            ],
            dom: 'Bfrtip',
            buttons: [
                {
                    id:"btnAddNew",
                    text: 'Add New',
                    className: 'btn-primary',

                    action: function ( e, dt, node, config ) {
                    
                        $("#process-entry-modal").modal('show');
                    }
                }
            ],
            "initComplete": function(settings, json) {
                $("#process-list-table").wrap("<div style='overflow:auto; width:100%;position:relative;'></div>");

                var btns = $('.btn-primary');
                btns.addClass('btn-sm');
                btns.removeClass('btn-secondary');
            }
        });



    }

    function clearModal() {
        $('#orderId').val(null).trigger("change");
        $('#windowName').val('');
        $('#hdnTypeId').val('');
    }

    $('#process-entry-modal').on('click', '#btn-process-save', function () {
        debugger;
         var windowName = $('#windowName').val();
         var typeId = $('#hdnTypeId').val();
         var orderId = $('#orderId').val();

         $.confirm({
            title: 'Confirm!',
            content: 'Are you sure to save?',
            buttons: {
                confirm: function () {
                    var type = {};
                    type['WindowName'] = windowName;
                    type['WindowId'] = typeId;
                    type['OrderId'] = orderId;
                   
                    $.ajax({
                        url: "/Window/SaveWindow",
                        type: "POST",
                        data: { type: type },
                        success: function (data) {

                            if (data.status == true) {
                                toastr.success("message", data.message);
                               $("#process-entry-modal").modal('hide');
                                clearModal();
                                loadCallTypeList();
                            }
                            else {
                                toastr.error("Error", data.message);
                                $.alert(data.message);
                            }
                        }
                       
                    });

                },
                cancel: function () {
                    
                }
            }
        });
            
        });

    $('#process-list-table').on('click', '.row-edit', function() {

        var rowData = table.row($(this).parents('tr')).data();
        console.log(rowData);
        $('#windowName').val(rowData['windowName']);
        $('#hdnTypeId').val(rowData['windowId']);

         $('#orderId').html('');
         var optionState ='';
         optionState ='<option value="' + rowData['orderId'] +'">' + rowData['orderName'] +'</option>';        
         $('#orderId').append(optionState);

        $("#process-entry-modal").modal('show');
    } )
       
    var pageSize = 5;
    
    $("#orderId").select2({
        multiple: false,
        delay: 250,
        cache: true,
        templateSelection: function (state) {
            if (state.id) {
                return state.name ? state.name : state.text;
            }
        },
        ajax: {
            url: "/Window/OrderFilter",
            data: function (params) {
                var query = {
                    orderId: (!params.term) ?  "":params.term,
                    orderName: (!params.term) ?  "":params.term,
                    pageNumber: params.page || 1,
                    pageSize: pageSize
                    
                };
                return query;
            },
            dataType: 'json',
            processResults: function (response, params) {
                
                selectData = {};
                params.page = params.page || 1;
                selectData = response.data.map(function (item) {
                    return {
                        id: item.orderId,
                        text: item.orderName                       
                    };
                });
                //hideLoader();
                return {
                    results: selectData,
                     pagination: {
                        more: (params.page * pageSize) < response.total
                    }
                };
            }
        },
        placeholder: "Select a State",
        allowClear: true,
        dropdownParent: $("#process-entry-modal")

    });

    $(document).on('select2:open', () => {
        document.querySelector('.select2-search__field').focus();
    });
    
    function CloseModalPopup() {       
            $("#process-entry-modal").modal('hide');
            $("#btn_close").modal('hide');
            clearModal();
    }

    </script>
}
